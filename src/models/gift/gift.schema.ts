import { Schema } from 'mongoose';
import { IGift } from './gift.model';


/**
 * Schema definition for the Gift model.
 *
 * @typedef {Object} IGift
 * @property {string} id - Unique identifier for the gift, generated by default.
 * @property {string} title - Title of the gift, required.
 * @property {Array<Object>} items - List of items included in the gift.
 * @property {string} items.id - Unique identifier for the item, required.
 * @property {number} items.count - Count of the item, defaults to 1.
 * @property {Array<Object>} creatures - List of creatures included in the gift.
 * @property {string} creatures.id - Unique identifier for the creature, required.
 * @property {number} creatures.level - Level of the creature, required.
 * @property {boolean} [creatures.shiny] - Indicates if the creature is shiny.
 * @property {number} [creatures.form] - Form of the creature.
 * @property {number} [creatures.gender] - Gender of the creature.
 * @property {number} [creatures.nature] - Nature of the creature.
 * @property {Schema.Types.Mixed} [creatures.ability] - Ability of the creature.
 * @property {number} [creatures.loyalty] - Loyalty of the creature.
 * @property {Array<number>} [creatures.stats] - Stats of the creature.
 * @property {Array<number>} [creatures.bonus] - Bonus stats of the creature.
 * @property {Array<string>} [creatures.moves] - Moves of the creature.
 * @property {Schema.Types.Mixed} [creatures.item] - Item held by the creature.
 * @property {string} [creatures.given_name] - Given name of the creature.
 * @property {Schema.Types.Mixed} [creatures.captured_with] - Method used to capture the creature.
 * @property {number} [creatures.captured_in] - Location where the creature was captured.
 * @property {string} [creatures.trainer_name] - Name of the trainer.
 * @property {number} [creatures.trainer_id] - ID of the trainer.
 * @property {Array<Object>} eggs - List of eggs included in the gift.
 * @property {string} eggs.id - Unique identifier for the egg, required.
 * @property {number} eggs.level - Level of the egg, defaults to 1.
 * @property {boolean} [eggs.shiny] - Indicates if the egg is shiny.
 * @property {number} [eggs.form] - Form of the egg.
 * @property {number} [eggs.gender] - Gender of the egg.
 * @property {number} [eggs.nature] - Nature of the egg.
 * @property {Schema.Types.Mixed} [eggs.ability] - Ability of the egg.
 * @property {Array<number>} [eggs.stats] - Stats of the egg.
 * @property {Array<number>} [eggs.bonus] - Bonus stats of the egg.
 * @property {string} [eggs.trainer_name] - Name of the trainer.
 * @property {number} [eggs.trainer_id] - ID of the trainer.
 * @property {Array<string>} claimedBy - List of users who have claimed the gift, defaults to an empty array.
 * @property {Array<string>} allowedClaimers - List of users allowed to claim the gift, defaults to an empty array.
 * @property {string} type - Type of the gift, required, can be either 'code' or 'internet'.
 * @property {string} [code] - Code for the gift, required if the type is 'code'.
 */
export const SGift = new Schema<IGift>({
  id: {
    type: String,
    default: function () {
      return `gift-${Math.random().toString(36).substring(2, 10)}`;
    },
    unique: true,
  },
  title: { type: String, required: true },
  items: {
    type: [
      {
        id: { type: String, required: true },
        count: { type: Number, default: 1 },
      },
    ],
    default: [],
  },
  creatures: {
    type: [
      {
        id: { type: String, required: true },
        level: { type: Number, required: true },
        shiny: { type: Boolean },
        form: { type: Number },
        gender: { type: Number },
        nature: { type: Number },
        ability: { type: Schema.Types.Mixed },
        loyalty: { type: Number },
        stats: { type: [Number] },
        bonus: { type: [Number] },
        moves: { type: [String] },
        item: { type: Schema.Types.Mixed },
        given_name: { type: String },
        captured_with: { type: Schema.Types.Mixed },
        captured_in: { type: Number },
        trainer_name: { type: String },
        trainer_id: { type: Number },
      },
    ],
    default: [],
  },
  eggs: {
    type: [
      {
        id: { type: String, required: true },
        level: { type: Number, default: 1 },
        shiny: { type: Boolean },
        form: { type: Number },
        gender: { type: Number },
        nature: { type: Number },
        ability: { type: Schema.Types.Mixed },
        stats: { type: [Number] },
        bonus: { type: [Number] },
        trainer_name: { type: String },
        trainer_id: { type: Number },
      },
    ],
    default: [],
  },
  claimedBy: { type: [String], default: [] },
  allowedClaimers: { type: [String], default: [] },
  type: { type: String, required: true, enum: ['code', 'internet'] },
  code: {
    type: String,
    required: function (this: IGift) {
      return this.type === 'code';
    },
  },
  rarity: { type: Number, default: 0 },
  alwaysAvailable: { type: Boolean, default: false },
  validFrom: { type: Date },
  validTo: {
    type: Date,
    validate: {
      validator: function (this: IGift, value: Date) {
        return !this.validFrom || !value || value > this.validFrom;
      },
      message: 'validTo must be a date after validFrom.',
    },
  },
});